
# 初始置换表（IP表）
IP = [
    58, 50, 42, 34, 26, 18, 10, 2,
    60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6,
    64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17, 9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7
]

# 逆初始置换表（IP^-1表）
IP_INV = [
    40, 8, 48, 16, 56, 24, 64, 32,
    39, 7, 47, 15, 55, 23, 63, 31,
    38, 6, 46, 14, 54, 22, 62, 30,
    37, 5, 45, 13, 53, 21, 61, 29,
    36, 4, 44, 12, 52, 20, 60, 28,
    35, 3, 43, 11, 51, 19, 59, 27,
    34, 2, 42, 10, 50, 18, 58, 26,
    33, 1, 41, 9, 49, 17, 57, 25
]


# 将64位的明文或密文（以列表形式表示，每个元素是0或1）进行置换
# 置换算法
def permute(block, permutation_table):
    return ''.join(block[i - 1] for i in permutation_table)


# 示例
plaintext_block = "11001101" \
                  "00110010" \
                  "10101011" \
                  "00110011" \
                  "10111000" \
                  "11011100" \
                  "01101101" \
                  "01001010"
# 初值置换后的结果：
ip = permute(plaintext_block, IP)
# 逆初值置换后的结果：
ip_inv = permute(ip, IP_INV)

print("Initial Permutation:", ip)
print("Inverse Initial Permutation:", ip_inv)
print(f'Initial data ?= Permute data: {ip_inv == plaintext_block}')



